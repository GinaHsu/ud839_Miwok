Mar4
----------------------------------
1. Main- LinearLayout
    4 TextView:
    numbers/ colors/  family/ phrases

2. app/source/main/restdirectory: There files control how the app appears on different devices.

   Resources can include xml files, images, and other madia files.

   res/ values

    colors.xml
        This defines the colors of our app, the app theme colors and the color associated with each category of the words.
    dimensions.xml
        file which contains dimensions such as the width and height values for our app. It also contains the list item height which we've here set to be 88 dp.

        <!-- Height of each list item -->
        <dimen name="list_item_height">88dp</dimen>

    strings.xml
        These are all the text strings that will appear to the user in the app and we put them in a single file so that we can easily translate the app into other languages.

    styles.xml
        Here we define the theme of the app and specify the theme colors. We also have the style for how a category should look and thats's why each category on the main screen of the app looks similar in terms of height, pedding, front size and more.

Mar06
------------------------------------------------------------------------
1. Quiz: Use An Intent To Open Another Activity
    Hint: Check out section “1.2 Starting activities” in this Vogella Android tutorial on intents ( http://www.vogella.com/tutorials/AndroidIntent/article.html#usingintents_call ) for example code that may help you This article explains the format for defining a new method in the activity class (to handle the onClick attribute of a view).


    activity_main.xml
    android:onClick="openNumbersList"
                |
                |
    Mainactivity.java
    public void openNumbersList(View view){
        Intent numbersIntent = new Intent(MainActivity.this, NumbersActivity.class);

        // Start the new activity
        startActivity(numbersIntent);

2. Two types of Intents: Implicit Vs. Explicit Intents

    Example implicit intent:
    An implicit intent specifies an action that can invoke any app on the device able to perform the action. Using an implicit intent is useful when your app cannot perform the action, but other apps probably can and you'd like the user to pick which app to use.

    // Create the text message with a string
    Intent sendIntent = new Intent();
    sendIntent.setAction(Intent.ACTION_SEND);
    sendIntent.putExtra(Intent.EXTRA_TEXT, textMessage);
    sendIntent.setType("text/plain");

    // Verify that the intent will resolve to an activity
    if (sendIntent.resolveActivity(getPackageManager()) != null) {
    startActivity(sendIntent);
    }


    Example explicit intent:
    An explicit intent is one that you use to launch a specific app component, such as a particular activity or service in your app. To create an explicit intent, define the component name for the Intent object—all other intent properties are optional.

    // Executed in an Activity, so 'this' is the Context
    // The fileUrl is a string URL, such as "http://www.example.com/image.png"
    Intent downloadIntent = new Intent(this, DownloadService.class);
    downloadIntent.setData(Uri.parse(fileUrl));
    startService(downloadIntent);


Mar08
--------------------------------------------------------------------------------------

Event Listeners in Android:  https://developer.android.com/guide/topics/ui/ui-events.html

Input Events-
    On Android, there's more than one way to intercept the events from a user's interaction with your application. When considering events within your user interface, the approach is to capture the events from the specific View object that the user interacts with. The View class provides the means to do so.

    Within the various View classes that you'll use to compose your layout, you may notice several public callback methods that look useful for UI events. These methods are called by the Android framework when the respective action occurs on that object. For instance, when a View (such as a Button) is touched, the onTouchEvent() method is called on that object. However, in order to intercept this, you must extend the class and override the method. However, extending every View object in order to handle such an event would not be practical. This is why the View class also contains a collection of nested interfaces with callbacks that you can much more easily define. These interfaces, called event listeners, are your ticket to capturing the user interaction with your UI.

Event Listeners
    An event listener is an interface in the View class that contains a single callback method. These methods will be called by the Android framework when the View to which the listener has been registered is triggered by user interaction with the item in the UI.

    Included in the event listener interfaces are the following callback methods:

    onClick()
    From View.OnClickListener. This is called when the user either touches the item (when in touch mode), or focuses upon the item with the navigation-keys or trackball and presses the suitable "enter" key or presses down on the trackball.

Concrete Class  vs Interface vs Abstract Class
- Concrete Class
    contains states and methods that FULLY IMPLEMENTED.
- Abstract Class
    contains states
    some methods are fully implemented
    some methods are abstract, not implemented
- Interface
    NOT IMPLEMENTED AT ALL
    No states
    All methods are abstract, not implemented


How to setup an EVENT LISTENER?
    1. Define the event listener (and the custom behavior for when the event happens)
    2. Create a new object instance of the event listener (using the contructor)
    3. Attach the listener to the view

OnClickListener vs onClick
    You might be wondering why we're going through all the trouble of creating an anonymous subclass of OnClickListener and attaching it to a view, when we already know how to use the onClick XML attribute from from back in Android Basics: User Input. Why write something terrifying like:


    // In onCreate() in the Activity
    Button button = (Button) findViewById(R.id.ze_button);
    button.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            doSomeStuff();
        }
    });

    When we could do something much cleaner like:

    android:onClick="myListener" // This is in the XML layout

    public void myListener(View view){ // This is back in the Activity file
        doSomeStuff();
    }

    There are a couple reasons why you might want to programmatically set an OnClickListener.

    The first is if you ever want to change the behavior of your button while your app is running. You can point your button at another method entirely, or just disable the button by setting an OnClickListener that doesn't do anything.

    When you define a listener using the onClick attribute, the view looks for a method with that name only in its host activity. Programmatically setting an OnClickListener allows you to control a button's behavior from somewhere other than its host activity. This will become very relevant when we learn about Fragments, which are basically mini activities, allowing you to build reusable collections of views with their own lifecycle, which can then be assembled into activities. Fragments always need to use OnClickListeners to control their buttons, since they're not Activities, and won't be searched for listeners defined in onClick.

    For more commentary on the decision to use an OnClickListener vs onClick, check out this question (
    http://stackoverflow.com/questions/8977212/button-click-listeners-in-android
    ) on Stack Overflow.



