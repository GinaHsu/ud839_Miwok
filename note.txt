Mar4
----------------------------------
1. Main- LinearLayout
    4 TextView:
    numbers/ colors/  family/ phrases

2. app/source/main/restdirectory: There files control how the app appears on different devices.

   Resources can include xml files, images, and other madia files.

   res/ values

    colors.xml
        This defines the colors of our app, the app theme colors and the color associated with each category of the words.
    dimensions.xml
        file which contains dimensions such as the width and height values for our app. It also contains the list item height which we've here set to be 88 dp.

        <!-- Height of each list item -->
        <dimen name="list_item_height">88dp</dimen>

    strings.xml
        These are all the text strings that will appear to the user in the app and we put them in a single file so that we can easily translate the app into other languages.

    styles.xml
        Here we define the theme of the app and specify the theme colors. We also have the style for how a category should look and thats's why each category on the main screen of the app looks similar in terms of height, pedding, front size and more.

Mar06
------------------------------------------------------------------------
1. Quiz: Use An Intent To Open Another Activity
    Hint: Check out section “1.2 Starting activities” in this Vogella Android tutorial on intents ( http://www.vogella.com/tutorials/AndroidIntent/article.html#usingintents_call ) for example code that may help you This article explains the format for defining a new method in the activity class (to handle the onClick attribute of a view).


    activity_main.xml
    android:onClick="openNumbersList"
                |
                |
    Mainactivity.java
    public void openNumbersList(View view){
        Intent numbersIntent = new Intent(MainActivity.this, NumbersActivity.class);

        // Start the new activity
        startActivity(numbersIntent);

2. Two types of Intents: Implicit Vs. Explicit Intents

    Example implicit intent:
    An implicit intent specifies an action that can invoke any app on the device able to perform the action. Using an implicit intent is useful when your app cannot perform the action, but other apps probably can and you'd like the user to pick which app to use.

    // Create the text message with a string
    Intent sendIntent = new Intent();
    sendIntent.setAction(Intent.ACTION_SEND);
    sendIntent.putExtra(Intent.EXTRA_TEXT, textMessage);
    sendIntent.setType("text/plain");

    // Verify that the intent will resolve to an activity
    if (sendIntent.resolveActivity(getPackageManager()) != null) {
    startActivity(sendIntent);
    }


    Example explicit intent:
    An explicit intent is one that you use to launch a specific app component, such as a particular activity or service in your app. To create an explicit intent, define the component name for the Intent object—all other intent properties are optional.

    // Executed in an Activity, so 'this' is the Context
    // The fileUrl is a string URL, such as "http://www.example.com/image.png"
    Intent downloadIntent = new Intent(this, DownloadService.class);
    downloadIntent.setData(Uri.parse(fileUrl));
    startService(downloadIntent);

